lexer grammar Lexer;


IDENTIFICATIONDIVISION:'IDENTIFICATION DIVISION';
DOT:'.';
PROGRAMID:'PROGRAM-ID';
AUTHOR:'AUTHOR';
INSTALLATION:'INSTALLATION';
DATEWRITTEN:'DATE-WRITTEN';
DATECOMPILED:'DATE-COMPILED';
SECURITY:'SECURITY';
DATADIVISION:'DATA DIVISION';
LIKE:'LIKE';
PICTUREIS:'PICTURE IS';
PROCEDUREDIVISION:'PROCEDURE DIVISION';
USING:'USING';
BY:'BY';
REFERENCE:'REFERENCE';
CONTENT:'CONTENT';
VALUE:'VALUE';
ACCEPT:'ACCEPT';
ADD:'ADD';
TO:'TO';
GIVING:'GIVING';
ALTER:'ALTER';
PROCEED :'PROCEED';
CALL: 'CALL';
PRIMITIVE:'PRIMITIVE';
STRUCT:'STRUCT';
AS:'AS';
COPY: 'COPY';
REPLACING: 'REPLACING';
DISPLAY: 'DISPLAY';
DELIMITED:'DELIMITED';
SIZE:'SIZE';
SPACE:'SPACE';
WITH:'WITH';
NO:'NO';
ADVANCING:'ADVANCING';
DIVIDE: 'DIVIDE';
INTO:'INTO';
REMAINDER:'REMAINDER';
EVALUATE: 'EVALUATE';
ALSO:'ALSO';
WHEN:'WHEN';
OTHER:'OTHER';
THROUGH:'THROUGH';
GOTO: 'GOTO';
IF: 'IF';
THEN: 'THEN';
ELSE: 'ELSE';
END: 'END';
LOOP: 'LOOP';
VARYING:'VARYING';
FROM:'FROM';
WHILE:'WHILE';
UNTIL:'UNTIL';
MOVE: 'MOVE' ;
HIGHVALUES:'HIGH-VALUES';
LOWVALUES:'LOW-VALUES';
SPACES:'SPACES';
MULTIPLY: 'MULTIPLY';
NEXTSENTENCE: 'NEXT_SENTENCE';
PERFORM: 'PERFORM';
TIMES: 'TIMES';
SIGNAL: 'SIGNAL';
OFF:'OFF';
ON:'ON';
ERROR: 'ERROR';
STOP: 'STOP';
SUBTRACT: 'SUBTRACT';
TRUE: 'TRUE';
FALSE: 'FALSE';



COMMENT : '*' ~[\r\n]* -> skip ;
NEWLINE : [\r\n]+ -> skip;
INT     : [0-9]+ ;
IDENTIFIER : [a-zA-Z_][a-zA-Z_0-9]+;
EQ : '=' ;
COMMA : ',' ;
SEMI : ';' ;
LPAREN : '(' ;
RPAREN : ')' ;
LCURLY : '{' ;
STAR: '*';
SLASH: '/';
PLUS: '+';
MINUS: '-';
RCURLY : '}' ;
REPRESENTATION: 'X'('(' INT ')') | '9'('(' INT ')');